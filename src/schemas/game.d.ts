/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Pattern for hex colour strings
 */
export type Colourstrings = string;

/**
 * Representation of Zendo game state
 */
export interface ZendoGameState {
  /**
   * Peer ID of the game master
   */
  master?: string;
  /**
   * List of peer IDs granted student status, along with their guessing stone counts
   */
  students?: {
    /**
     * Peer ID
     */
    id: string;
    /**
     * Number of available guesses
     */
    guesses: number;
  }[];
  /**
   * The type of koans accepted. All koans are fundamentally strings, but this will determine how those strings are interpreted and displayed.
   */
  koanType?:
    | "text"
    | "image"
    | "math"
    | "1dpyramids"
    | "2dpyramids"
    | "dotmatrix"
    | "graphviz"
    | "1dcards"
    | "2dcards"
    | "plantuml";
  /**
   * Optional notes that will be pinned to the top of the game screen. Use to establish any ground rules.
   */
  welcome?: string;
  /**
   * Only meaningful in pyramid games. The master can dictate the allowable colours for the game.
   *
   * @minItems 1
   */
  colours?: [
    {
      abbreviation: string;
      hex: Colourstrings;
    },
    ...{
      abbreviation: string;
      hex: Colourstrings;
    }[]
  ];
  /**
   * List of guesses
   */
  guesses?: {
    /**
     * Peer ID of guessing student
     */
    student: string;
    /**
     * The number of koans in play at the time the guess was tendered
     */
    index: number;
    /**
     * The guess itself, as accepted by the master
     */
    guess: string;
  }[];
  /**
   * Describes the an active guess that has not yet been accepted by the master
   */
  guessPending?: {
    /**
     * The guess itself
     */
    guess: string;
    /**
     * The ID of the student profering the guess
     */
    student: string;
  };
  /**
   * The ID of the person whose turn it currently is.
   */
  currplayer?: string;
  /**
   * The complete list of koans
   */
  koans?: {
    /**
     * The string representation of the koan, interpreted based on the global `koanType` definition.
     */
    string: string;
    /**
     * Whether or not this koan 'has the Buddha nature'
     */
    htbn: boolean;
  }[];
  /**
   * Describes the a single koan being submitted for review, including its state
   */
  koanPending?: {
    /**
     * The koan itself
     */
    koan: string;
    /**
     * Whether 'master' or 'mondo' requested
     */
    call: "master" | "mondo";
    /**
     * The list of votes submitted
     */
    votes?: {
      /**
       * Peer ID of voting student
       */
      student: string;
      /**
       * The vote itself
       */
      vote: boolean;
    }[];
  };
  /**
   * The ID of the winning player
   */
  winner?: string | null;
}
